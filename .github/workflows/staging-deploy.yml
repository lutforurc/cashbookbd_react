name: Staging React App CI/CD Pipeline

on:
  push:
    branches:
      - react-staging
  workflow_dispatch:

jobs:
  build-and-deploy:
    name: Build and Deploy React App
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: |
          set -Eeuo pipefail
          npm ci

      - name: Build React app
        env:
          CI: true
        run: |
          set -Eeuo pipefail
          npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: dist
          if-no-files-found: error
          retention-days: 5

      # ---- Deploy Section ----

      - name: Validate deploy secrets
        env:
          SSH_PRIVATE_KEY: ${{ secrets.REACT_STAGING_SSH_PRIVATE_KEY }}
          SSH_USER:        ${{ secrets.REACT_STAGING_SSH_USER }}   # ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶á ‡¶∏‡¶ø‡¶ï‡ßç‡¶∞‡ßá‡¶ü ‡¶Ü‡¶õ‡ßá
          SSH_HOST:        ${{ secrets.REACT_STAGING_HOST }}
          SSH_PORT:        ${{ secrets.REACT_STAGING_PORT }}
          REMOTE_DIR:      ${{ secrets.REACT_STAGING_REMOTE_DIR }}
        run: |
          set -Eeuo pipefail
          : "${SSH_PORT:=22}"

          # Length ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡ßã‡¶∞‡ßç‡¶ü‡ßá‡¶¨‡¶≤ ‡¶â‡¶™‡¶æ‡ßü (no bad substitution)
          KEYLEN=$(printf '%s' "${SSH_PRIVATE_KEY-}" | wc -c | tr -d '[:space:]')

          echo "üîç user=${SSH_USER:-<empty>} host=${SSH_HOST:-<empty>} port=${SSH_PORT:-<empty>}"
          echo "üîç private_key_length=${KEYLEN}"
          echo "üîç remote_dir=${REMOTE_DIR:-<empty>}"

          [ -n "${SSH_PRIVATE_KEY-}" ] || { echo "‚ùå REACT_STAGING_SSH_PRIVATE_KEY is empty"; exit 1; }
          [ -n "${SSH_USER-}" ]        || { echo "‚ùå REACT_STAGING_SSH_USER is empty"; exit 1; }
          [ -n "${SSH_HOST-}" ]        || { echo "‚ùå REACT_STAGING_HOST is empty"; exit 1; }
          [ -n "${REMOTE_DIR-}" ]      || { echo "‚ùå REACT_STAGING_REMOTE_DIR is empty"; exit 1; }

      - name: Prepare SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.REACT_STAGING_SSH_PRIVATE_KEY }}
          SSH_HOST:        ${{ secrets.REACT_STAGING_HOST }}
          SSH_PORT:        ${{ secrets.REACT_STAGING_PORT }}
        run: |
          set -Eeuo pipefail
          : "${SSH_PORT:=22}"

          mkdir -p ~/.ssh
          printf '%s\n' "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Host key add (non-22 port safe)
          ssh-keyscan -p "$SSH_PORT" -H "$SSH_HOST" \
            | sed "s/^$SSH_HOST/[${SSH_HOST}]:${SSH_PORT}/" >> ~/.ssh/known_hosts

          echo "‚úÖ SSH key and host added."

      - name: Debug SSH connection (optional)
        continue-on-error: true
        env:
          SSH_USER: ${{ secrets.REACT_STAGING_SSH_USER }}
          SSH_HOST: ${{ secrets.REACT_STAGING_HOST }}
          SSH_PORT: ${{ secrets.REACT_STAGING_PORT }}
        run: |
          ssh -vvv -o BatchMode=yes -o IdentitiesOnly=yes -p "${SSH_PORT:-22}" \
            "$SSH_USER@$SSH_HOST" "echo '‚úÖ SSH Connected'; whoami; echo HOME=$HOME; hostname"

      - name: Deploy to VPS via rsync
        env:
          SSH_USER:   ${{ secrets.REACT_STAGING_SSH_USER }}
          SSH_HOST:   ${{ secrets.REACT_STAGING_HOST }}
          SSH_PORT:   ${{ secrets.REACT_STAGING_PORT }}
          REMOTE_DIR: ${{ secrets.REACT_STAGING_REMOTE_DIR }}
        run: |
          set -Eeuo pipefail
          : "${SSH_PORT:=22}"

          echo "üì¶ Local build contents:"
          ls -la dist/ || { echo "‚ùå dist/ not found. Did the build produce a different outDir?"; exit 1; }

          # Ensure remote target exists
          ssh -o IdentitiesOnly=yes -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" \
            "mkdir -p '$REMOTE_DIR'"

          # Deploy
          rsync -avz --delete-delay \
            -e "ssh -o IdentitiesOnly=yes -p ${SSH_PORT}" \
            dist/ "$SSH_USER@$SSH_HOST:$REMOTE_DIR/"

          echo "üöÄ Deployment completed."

      - name: Restart web server on VPS
        env:
          SSH_USER: ${{ secrets.REACT_STAGING_SSH_USER }}
          SSH_HOST: ${{ secrets.REACT_STAGING_HOST }}
          SSH_PORT: ${{ secrets.REACT_STAGING_PORT }}
        run: |
          set -Eeuo pipefail
          : "${SSH_PORT:=22}"
          ssh -o IdentitiesOnly=yes -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" \
            "sudo -n systemctl reload nginx || sudo -n systemctl restart nginx"
          echo "üîÑ Nginx reloaded."

      - name: Smoke test
        env:
          DEPLOY_URL: ${{ secrets.REACT_STAGING_DEPLOY_URL }}
        run: |
          set -Eeuo pipefail
          test -n "${DEPLOY_URL-}" || { echo "‚ùå REACT_STAGING_DEPLOY_URL is empty"; exit 1; }
          curl -I -L --max-time 20 "$DEPLOY_URL" | tee /tmp/headers.txt
          grep -E '^HTTP/.* (200|301|302) ' /tmp/headers.txt >/dev/null || {
            echo '‚ùå Smoke test failed'; exit 1;
          }
