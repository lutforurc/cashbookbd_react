name: Staging React-Application CI/CD Pipeline

on:
  push:
    branches: ["staging"]
    tags:
      - "*"
  pull_request:
    branches: ["staging"]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: staging-deploy
  cancel-in-progress: true

jobs:
  sanity-check:
    name: Sanity trigger check
    runs-on: ubuntu-latest
    steps:
      - run: echo "‚úÖ Workflow triggered on $GITHUB_REF ($GITHUB_SHA)"

  build-and-deploy:
    name: Build and Deploy React App
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [sanity-check]
    env:
      NODE_ENV: production
      REMOTE_DIR: /home/accounts_staging/htdocs/accounts.staging.cashbookbd.com/

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          set -Eeuo pipefail
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Build React app (auto-detect outdir)
        env:
          CI: true
        run: |
          set -Eeuo pipefail
          npm run build
          OUTDIR=""
          if [ -d dist ]; then
            OUTDIR="dist"
          elif [ -d build ]; then
            OUTDIR="build"
          fi
          test -n "$OUTDIR" || (echo "‚ùå No dist/ or build/ found. Check your bundler output." && exit 1)
          echo "OUTDIR=$OUTDIR" >> "$GITHUB_ENV"

      - name: Upload build artifact (for debugging/rollback)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OUTDIR }}-${{ github.sha }}
          path: ${{ env.OUTDIR }}
          if-no-files-found: error
          retention-days: 7

      - name: Prepare SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.STAGING_SSH_PRIVATE_KEY }}
          SSH_USER: ${{ secrets.USERNAME }}
          SSH_HOST: ${{ secrets.HOST }}
          SSH_PORT: ${{ secrets.PORT }}
        run: |
          set -Eeuo pipefail
          mkdir -p ~/.ssh
          printf '%s\n' "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Add host key dynamically using ssh-keyscan fallback
          echo "‚öôÔ∏è Fetching host key using ssh-keyscan..."
          ssh-keyscan -p "${SSH_PORT:-22}" -H "$SSH_HOST" \
            | sed "s/^$SSH_HOST/[${SSH_HOST}]:${SSH_PORT:-22}/" >> ~/.ssh/known_hosts

          cat > ~/.ssh/config <<EOF
          Host staging-host
            HostName $SSH_HOST
            Port ${SSH_PORT:-22}
            User $SSH_USER
            StrictHostKeyChecking yes
            UserKnownHostsFile ~/.ssh/known_hosts
          EOF

      - name: Debug SSH connection (optional)
        continue-on-error: true
        run: |
          ssh -vvv -p "${{ secrets.PORT }}" "${{ secrets.USERNAME }}@${{ secrets.HOST }}" "echo '‚úÖ Connected:' && whoami && hostname"

      - name: Deploy build via rsync
        env:
          SSH_USER: ${{ secrets.USERNAME }}
          SSH_HOST: ${{ secrets.HOST }}
          SSH_PORT: ${{ secrets.PORT }}
        run: |
          set -Eeuo pipefail
          test -n "${OUTDIR:-}" || (echo "OUTDIR not set" && exit 1)

          echo "üì¶ Local build contents:"
          ls -la "$OUTDIR"/

          # Ensure remote directory exists
          ssh -p "${SSH_PORT:-22}" "$SSH_USER@$SSH_HOST" "mkdir -p '$REMOTE_DIR'"

          # Sync with safer delete behavior
          rsync -avz \
            --delete-delay \
            --numeric-ids \
            --chmod=D755,F644 \
            --exclude='.DS_Store' \
            -e "ssh -p ${SSH_PORT:-22}" \
            "$OUTDIR"/ "$SSH_USER@$SSH_HOST:$REMOTE_DIR/"

      - name: Fix permissions on server (optional)
        continue-on-error: true
        env:
          SSH_USER: ${{ secrets.USERNAME }}
          SSH_HOST: ${{ secrets.HOST }}
          SSH_PORT: ${{ secrets.PORT }}
        run: |
          set -Eeuo pipefail
          ssh -p "${SSH_PORT:-22}" "$SSH_USER@$SSH_HOST" "
            sudo chown -R www-data:www-data '$REMOTE_DIR' || true
            find '$REMOTE_DIR' -type d -exec chmod 755 {} \; || true
            find '$REMOTE_DIR' -type f -exec chmod 644 {} \; || true
          "

      - name: Reload web server on VPS
        env:
          SSH_USER: ${{ secrets.USERNAME }}
          SSH_HOST: ${{ secrets.HOST }}
          SSH_PORT: ${{ secrets.PORT }}
        run: |
          set -Eeuo pipefail
          ssh -p "${SSH_PORT:-22}" "$SSH_USER@$SSH_HOST" \
            "sudo systemctl reload nginx || sudo systemctl restart nginx"

      - name: Smoke test (HTTP 200/301/302 expected)
        run: |
          set -Eeuo pipefail
          curl -I --max-time 15 https://accounts.staging.cashbookbd.com | tee /tmp/headers.txt
          grep -E '^HTTP/.* (200|301|302) ' /tmp/headers.txt >/dev/null || {
            echo '‚ùå Smoke test failed'; exit 1;
          }
